#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <cstring>
#include <iostream>
#include <string>
#include <iomanip>
#include <sstream>
#include "eval.h"
#include <signal.h>
#include <sys/wait.h>

//@author Timothy Bartolo
//811847393

/* program simulates the input
 * screen of the UNIX terminal.
 * processes, pipelines, and
 * files are read accordingly
 */
using namespace std;

eval get_input_info();
string get_prompt();
void display_help_info();
void close_pipe(int pipefd [2]);

/* main takes in user input and
 * passes it to eval class. Then
 * calls getter functions to display
 * all information regarding commands
 */
int main(int argc, const char *argv[]){

  cout.setf(std::ios_base::unitbuf); //turn off buffering for cout
  pid_t pid, wpid, upid; //various PIDs
  int pstatus; //process pstatus

  signal(SIGTSTP, SIG_IGN); //ignore ctrl-z
//signal(SIGINT, SIG_IGN); //ctrl-c //keep this commented out for now so we can easily exit
  signal(SIGQUIT, SIG_IGN);
  signal(SIGTTIN, SIG_IGN);
  signal(SIGTTOU, SIG_IGN); 

  while(true){ //shell infinite loop
    eval *ev = new eval(get_input_info()); //get user input information
    string *arg_v = ev -> get_argv();

    if(ev -> get_procs() == 0){ //check for other commands other than processes
      if(arg_v[0] == "exit"){ //exit
	if(ev -> get_argc() == 2){ //exit (int)
	  exit(stoi(arg_v[1]));
	} //if
	else{ //exit (no int)
	  exit(pstatus);
	} //else
      } //if
      else if(arg_v[0] == "cd"){ //cd
	if(ev -> get_argc() > 2){
	  printf("%s: invalid argument length\n", arg_v[0].c_str());
	} //if
	else if(ev -> get_argc() == 1){
	  chdir(getenv("HOME"));
	} //else if
	else if(chdir(arg_v[1].c_str()) < 0){
	  perror("change directory");
	} //if
      } //else if
      else if(arg_v[0] == "help"){ //help
	display_help_info();
      } //else if 
      
      delete ev; //call deconstructor to reset variables
      continue; //go to while loop
    } //if

    int pipefd[2];//piping
    if(pipe(pipefd) == -1){
      perror("pipe");
    }//if

    for(int numProc = 0; numProc <= ev -> get_pipes(); numProc++){ //loop on number of processes
      if((pid = fork()) < 0) { // error 
	perror("FORK ERROR");
      } //if
      else if (pid == 0) { //child
	string *arg_v1 = ev -> get_process(numProc);
	char **args = new char *[ev -> get_process_args(numProc)];

	signal(SIGTSTP, SIG_DFL); //ignore ctrl-z
	signal(SIGINT, SIG_DFL); //ctrl-c
	signal(SIGQUIT, SIG_DFL);
	signal(SIGTTIN, SIG_DFL);
	signal(SIGTTOU, SIG_DFL); 

	for(int j = 0; j < ev -> get_process_args(numProc); j++){
	  args[j] = strdup(arg_v1[j].c_str());
	} //for 

	//if there is a pipe
	if(ev -> get_pipes() > 0){
	  if(numProc == 0){//if this is the first process
	    if(dup2(pipefd[1], STDOUT_FILENO) == -1){
	      perror("pipeout");
	    }//if
	  }else{//second process
	    if(dup2(pipefd[0], STDIN_FILENO) == -1){
	      perror("pipein");
	    }//if
	  }//else
	}//if

	close_pipe(pipefd);//close pipe in child

	args[ev -> get_process_args(numProc)] = nullptr; //last element is \0
	execvp(args[0], args);
	
	perror("execvp"); //if execvp fail
	exit(EXIT_FAILURE);
      } //else if (child)
      else{ //parent
	if(numProc == ev -> get_pipes()){//close pipe if last process
	  close_pipe(pipefd);
	}//if

	bool dead = false;
	bool cont = true;

	while(!dead){
	  if ((wpid = waitpid(pid, &pstatus, WNOHANG) == -1)){
	    dead = true;
	    perror("waitpid: WNOHANG");
	  } //if
	  else if (WIFEXITED(pstatus)){ //if child process exits
	    cout << "\n" <<  pid << " Exited (" << WEXITSTATUS(pstatus) << ") emacs\n";
	    dead = true;
	    cont = false;
	  } //else if child exited
	  else if (WIFSIGNALED(pstatus)){ ///if child process returns signal
	    int sig = WTERMSIG(pstatus);
	    cout << "\n" <<  pid << " Exited (" << strsignal(sig) << ") emacs\n";
	    dead = true;
	    cont = false;
	  } //else if child signaled
	  
	  if((upid = waitpid(pid, &pstatus, WUNTRACED) == -1)){
	    dead = true;
	    perror("waitpid: WUNTRACED");
	  } //if
	  else if(WIFSTOPPED(pstatus)){
	    cout << "\n" <<  pid << " Stopped ";
	    for(int n = 0; n < ev -> get_process_args(numProc); n++){
	      cout << ev -> get_process(numProc)[n] << " ";
	    } //for
	    cout << "\n";
	    dead = true;
	  } //else if

	  if(cont){
	    if((upid = waitpid(pid, &pstatus, WCONTINUED) == -1)){
	      dead = true;
	      perror("waitpid: WCONTINUED");
	    } //if
	    else if(WIFCONTINUED(pstatus)){
	      cout << "\n" <<  pid << " Continued ";
	      for(int n = 0; n < ev -> get_process_args(numProc); n++){
	      cout << ev -> get_process(numProc)[n] << " ";
	      } //for
	      cout << "\n";
	      dead = true;
	    } //else if 
	  } //if (cont)
	} //while (parent)
      } //else (parent)
     } //for
  
     delete ev; //call deconstructor to reset variables
  } //while (shell)
} //main

/* function displays prompt to user and
 * sends user input to the evaluate class
 * to break it down into useful information
 */
eval get_input_info(){

  string input;
  string word;
  int total_args = 1;
  string prompt;

  prompt = get_prompt();
  
  while(input.empty()){ //if user enters just ENTER
    cout << prompt;
    getline(cin, input); //store string in input
  } //while

  string input_args[100];
  const char *args[100];
    
  istringstream iss(input);
    
  while(iss >> word) {
    input_args[total_args] = word;
    total_args++;
  } //while
  
  for(int i = 0; i < total_args; i++){
    args[i] = input_args[i].c_str();
  } //for
    
  eval ev(total_args, args);
  return ev;
} //get_input_info

/* function updates the user
 * prompt to the current working
 * directory each time it is called
 */
string get_prompt(){

  const char *path;
  string the_prompt = "1730sh: ";

  path = get_current_dir_name();
  string the_path(path);

  if(the_path.find(getenv("HOME")) != string::npos){ //if the path contains the HOME dir
    the_path.erase(0, strlen(getenv("HOME"))); //erase HOME dir from path
    the_prompt += "~";
  } //if

  the_prompt += the_path;
  the_prompt += "$ ";

  return the_prompt;
} //get_prompt

/* functions outputs to
 * standard out helpful
 * information on how to
 * use the program
 */
void display_help_info(){

   cout << "\n- bg JID - Resume the stopped job JID in the background, as if it had been started with &.\n" <<
     "- cd [PATH] - Change the current directory toPATH. The environmental variable HOME is the default PATH.\n" <<
     "- exit [N] - Cause the shell to exit with a status of N. If N is omitted, the exit status is that of the last job executed.\n" <<
     "- export NAME[=WORD] - NAME is automatically included in the environment of subsequently executed jobs.\n" <<
     "- fg JID - Resume job JID in the foreground, and make it the current job.\n" <<
     "- help - Display helpful information about builtin commands.\n" <<
     "- jobs - List current jobs.\n";
  
   cout << "\n- cat [file] - Display a file's contents.\n" <<
     "- grep [word/s] [file] - Search for a word within a file.\n" <<
     "- less [file] - Display contents of file and enable scrolling.\n" <<
     "- echo [input] - Echo input to standard out.\n\n";

} //display_help_info

/**
 * Used for closing a pipe
 *
 */
void close_pipe(int pipefd [2]) {
  if (close(pipefd[0]) == -1) {
    perror("close");
    exit(EXIT_FAILURE);
  } // if
  if (close(pipefd[1]) == -1) {
    perror("close");
    exit(EXIT_FAILURE);
  } // if
} // close_pipe
